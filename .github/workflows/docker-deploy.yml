name: Build, Push, and Deploy Docker Images

on:
  push:
    branches:
      - main

jobs:
  build-and-push-app:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push app Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./spring-boot-hello-world-example/Dockerfile-app
          push: true
          tags: nasanbuyan/my-spring-boot-app:latest

  build-and-push-mysql:
    runs-on: ubuntu-latest
    needs: build-and-push-app
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push MySQL Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./spring-boot-hello-world-example/Dockerfile-db
          push: true
          tags: nasanbuyan/mysql:5.7

  deploy-to-azure-vm:
    runs-on: ubuntu-latest
    needs: [build-and-push-app, build-and-push-mysql]  # Ensure both build and push jobs are complete before deploying
    steps:
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
          
            # Log in to Docker Hub if the image is private
            echo "Logging in to Docker Hub..."
            echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            
            echo "Pulling the latest Docker images..."
            docker pull nasanbuyan/my-spring-boot-app:latest
            docker pull nasanbuyan/mysql:5.7

            # Stop and remove the existing container if it's already running
            if [ $(docker ps -q -f name=app-container) ]; then
              echo "Container my-container exists, stopping and removing it..."
              docker stop app-container
              docker rm app-container
            else
              echo "Container app-container does not exist, no action needed."
            fi

            if [ $(docker ps -q -f name=mysql-container) ]; then
              echo "Container my-container exists, stopping and removing it..."
              docker stop mysql-container
              docker rm mysql-container
            else
              echo "Container app-container does not exist, no action needed."
            fi
            
            
            echo "Starting new MySQL container..."
            docker run --name mysql-container -d \
              -e MYSQL_DATABASE=rms \
              -e MYSQL_USER=rms \
              -e MYSQL_PASSWORD=password \
              -e MYSQL_ROOT_PASSWORD=toor \
              -p 3306:3306 \
               nasanbuyan/mysql:5.7

            echo "Starting new App container..."
            docker run --name app-container -d \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/rms \
              -e SPRING_DATASOURCE_USERNAME=rms \
              -e SPRING_DATASOURCE_PASSWORD=password \
              -p 8080:8080 \
              --link mysql-container:db \
              nasanbuyan/my-spring-boot-app:latest
